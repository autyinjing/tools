!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AUT_LIST_H	./list.h	11;"	d
INIT_LIST_HEAD	./list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f	signature:(struct list_head *list)
LIST_HEAD	./list.h	86;"	d
LIST_HEAD_INIT	./list.h	84;"	d
LIST_POISON1	./list.h	117;"	d
LIST_POISON2	./list.h	118;"	d
Player	./list_test.c	/^    Player() : { id = 0; INIT_LIST_HEAD(&list_head) }$/;"	f	struct:Player	access:public
Player	./list_test.c	/^struct Player {$/;"	s	file:
Player::Player	./list_test.c	/^    Player() : { id = 0; INIT_LIST_HEAD(&list_head) }$/;"	f	struct:Player	access:public
Player::id	./list_test.c	/^    int     id;$/;"	m	struct:Player	file:	access:public
Player::list_head	./list_test.c	/^    struct list_head list_head;$/;"	m	struct:Player	typeref:struct:Player::list_head	file:	access:public
READ_ONCE	./list.h	54;"	d
WRITE_ONCE	./list.h	76;"	d
__list_add	./list.h	/^static inline void __list_add(struct list_head *new,$/;"	f	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_cut_position	./list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
__list_del	./list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f	signature:(struct list_head *prev, struct list_head *next)
__list_del_entry	./list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
__list_splice	./list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, struct list_head *prev, struct list_head *next)
__read_once_size	./list.h	/^void __read_once_size(const volatile void *p, void *res, int size)$/;"	f	signature:(const volatile void *p, void *res, int size)
__u16	./list.h	/^typedef unsigned short int      __u16;$/;"	t
__u32	./list.h	/^typedef unsigned int            __u32;$/;"	t
__u64	./list.h	/^typedef unsigned long int       __u64;$/;"	t
__u64	./list.h	/^typedef unsigned long long int  __u64;$/;"	t
__u8	./list.h	/^typedef unsigned char           __u8;$/;"	t
__write_once_size	./list.h	/^void __write_once_size(volatile void *p, void *res, int size)$/;"	f	signature:(volatile void *p, void *res, int size)
a	./oftest.c	/^    int     a;$/;"	m	struct:str	file:	access:public
b	./oftest.c	/^    double  b;$/;"	m	struct:str	file:	access:public
barrier	./asm.c	12;"	d	file:
barrier	./list.h	36;"	d
c	./oftest.c	/^    char    c;$/;"	m	struct:str	file:	access:public
container_of	./list.h	289;"	d
id	./list_test.c	/^    int     id;$/;"	m	struct:Player	file:	access:public
list_add	./list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	./list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_cut_position	./list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
list_del	./list.h	/^static inline void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del_init	./list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_empty	./list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_empty_careful	./list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_entry	./list.h	294;"	d
list_first_entry	./list.h	298;"	d
list_first_entry_or_null	./list.h	306;"	d
list_for_each	./list.h	321;"	d
list_for_each_entry	./list.h	340;"	d
list_for_each_entry_continue	./list.h	352;"	d
list_for_each_entry_continue_reverse	./list.h	358;"	d
list_for_each_entry_from	./list.h	364;"	d
list_for_each_entry_reverse	./list.h	346;"	d
list_for_each_entry_safe	./list.h	369;"	d
list_for_each_entry_safe_continue	./list.h	376;"	d
list_for_each_entry_safe_from	./list.h	383;"	d
list_for_each_entry_safe_reverse	./list.h	389;"	d
list_for_each_prev	./list.h	325;"	d
list_for_each_prev_safe	./list.h	334;"	d
list_for_each_safe	./list.h	329;"	d
list_head	./list.h	/^struct list_head {$/;"	s
list_head	./list_test.c	/^    struct list_head list_head;$/;"	m	struct:Player	typeref:struct:Player::list_head	file:	access:public
list_head::next	./list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_head::prev	./list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_is_last	./list.h	/^static inline int list_is_last(const struct list_head *list, const struct list_head *head)$/;"	f	signature:(const struct list_head *list, const struct list_head *head)
list_is_singular	./list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_last_entry	./list.h	302;"	d
list_move	./list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_move_tail	./list.h	/^static inline void list_move_tail(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_next_entry	./list.h	313;"	d
list_prepare_entry	./list.h	398;"	d
list_prev_entry	./list.h	317;"	d
list_replace	./list.h	/^static inline void list_replace(struct list_head *old, struct list_head *new)$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_replace_init	./list.h	/^static inline void list_replace_init(struct list_head *old, struct list_head *new)$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_rotate_left	./list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f	signature:(struct list_head *head)
list_safe_reset_next	./list.h	395;"	d
list_splice	./list.h	/^static inline void list_splice(const struct list_head *list, struct list_head *head)$/;"	f	signature:(const struct list_head *list, struct list_head *head)
list_splice_init	./list.h	/^static inline void list_splice_init(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail	./list.h	/^static inline void list_splice_tail(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail_init	./list.h	/^static inline void list_splice_tail_init(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
main	./asm.c	/^int main(int argc, const char* argv[])$/;"	f	signature:(int argc, const char* argv[])
main	./list_test.c	/^int main(int argc, const char* argv[])$/;"	f	signature:(int argc, const char* argv[])
main	./oftest.c	/^int main(int argc, const char* argv[])$/;"	f	signature:(int argc, const char* argv[])
next	./list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
offsetof	./list.h	37;"	d
offsetof	./oftest.c	12;"	d	file:
prev	./list.h	/^    struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
printId	./list_test.c	/^void printId(const struct Player &player)$/;"	f	signature:(const struct Player &player)
str	./oftest.c	/^struct str {$/;"	s	file:
str::a	./oftest.c	/^    int     a;$/;"	m	struct:str	file:	access:public
str::b	./oftest.c	/^    double  b;$/;"	m	struct:str	file:	access:public
str::c	./oftest.c	/^    char    c;$/;"	m	struct:str	file:	access:public
