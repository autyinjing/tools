!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	./tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlVisitor* content ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlText	access:public	signature:( TiXmlVisitor* content ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( TiXmlVisitor* content ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const = 0;$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlComment	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlElement	access:public	signature:( TiXmlVisitor* visitor ) const
Add	./tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
Add	./tinyxml.h	/^	void Add( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
Attribute	./tinyxml.h	/^	const char* Attribute( const char* name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name ) const
Attribute	./tinyxml.h	/^	const char* Attribute( const char* name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* d ) const
Attribute	./tinyxml.h	/^	const char* Attribute( const char* name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* i ) const
Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name ) const
Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* d ) const
Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* i ) const
Blank	./tinyxml.h	/^	bool Blank() const;	\/\/ returns true if all white space and new lines$/;"	p	class:TiXmlText	access:protected	signature:() const
Blank	./tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
CDATA	./tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
CStr	./tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
Child	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
Child	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
Child	./tinyxml.h	/^	TiXmlHandle Child( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
Child	./tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
Child	./tinyxml.h	/^	TiXmlHandle Child( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
ChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
ChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
Clear	./tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
Clear	./tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
Clear	./tinyxml.h	/^	void Clear();$/;"	p	class:TiXmlNode	access:public	signature:()
ClearError	./tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
ClearThis	./tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
ClearThis	./tinyxml.h	/^	void ClearThis();	\/\/ like clear, but initializes 'this' object as well$/;"	p	class:TiXmlElement	access:protected	signature:()
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const = 0;$/;"	p	class:TiXmlNode	access:public	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlComment	access:public	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDeclaration	access:public	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDocument	access:protected	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlText	access:protected	signature:() const
Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlUnknown	access:public	signature:() const
Column	./tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
ConvertUTF32ToUTF8	./tinyxml.h	/^	static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned long input, char* output, int* length )
ConvertUTF32ToUTF8	./tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
CopyTo	./tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
CopyTo	./tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlComment* target ) const;$/;"	p	class:TiXmlComment	access:protected	signature:( TiXmlComment* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlDeclaration* target ) const;$/;"	p	class:TiXmlDeclaration	access:protected	signature:( TiXmlDeclaration* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlDocument* target ) const;$/;"	p	class:TiXmlDocument	access:private	signature:( TiXmlDocument* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlElement* target ) const;$/;"	p	class:TiXmlElement	access:protected	signature:( TiXmlElement* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlNode* target ) const;$/;"	p	class:TiXmlNode	access:protected	signature:( TiXmlNode* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlText* target ) const;$/;"	p	class:TiXmlText	access:protected	signature:( TiXmlText* target ) const
CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlUnknown* target ) const;$/;"	p	class:TiXmlUnknown	access:protected	signature:( TiXmlUnknown* target ) const
Cursor	./tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:() const
DEBUG	./tinyxml.h	43;"	d
DoIndent	./tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter	access:private	signature:()
DoLineBreak	./tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
DoubleValue	./tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
DoubleValue	./tinyxml.h	/^	double			DoubleValue() const;								\/\/\/< Return the value of this attribute, converted to a double.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
Element	./tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
EncodeString	./tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
EncodeString	./tinyxml.h	/^	static void EncodeString( const TIXML_STRING& str, TIXML_STRING* out );$/;"	p	class:TiXmlBase	access:public	signature:( const TIXML_STRING& str, TIXML_STRING* out )
Encoding	./tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Entity	./tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase	access:private
Error	./tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorCol	./tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorDesc	./tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorId	./tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorRow	./tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Find	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
Find	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
Find	./tinyxml.h	/^	TiXmlAttribute*	Find( const char* _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name ) const
Find	./tinyxml.h	/^	TiXmlAttribute*	Find( const std::string& _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name ) const
FindOrCreate	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
FindOrCreate	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
FindOrCreate	./tinyxml.h	/^	TiXmlAttribute* FindOrCreate( const char* _name );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name )
FindOrCreate	./tinyxml.h	/^	TiXmlAttribute* FindOrCreate( const std::string& _name );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name )
First	./tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
First	./tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
FirstAttribute	./tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
FirstAttribute	./tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
FirstChild	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChild	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChild	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild( const char * value ) const;			\/\/\/< The first child of this node with the matching 'value'. Will be null if none found.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
FirstChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChildElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChildElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement( const char * _value ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * _value ) const
FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement()	const;$/;"	p	class:TiXmlNode	access:public	signature:() const
GetChar	./tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
GetDocument	./tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
GetDocument	./tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
GetDocument	./tinyxml.h	/^	const TiXmlDocument* GetDocument() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
GetEntity	./tinyxml.h	/^	static const char* GetEntity( const char* in, char* value, int* length, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, char* value, int* length, TiXmlEncoding encoding )
GetEntity	./tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
GetText	./tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
GetText	./tinyxml.h	/^	const char* GetText() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
GetUserData	./tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
GetUserData	./tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
Identify	./tinyxml.h	/^	TiXmlNode* Identify( const char* start, TiXmlEncoding encoding );$/;"	p	class:TiXmlNode	access:protected	signature:( const char* start, TiXmlEncoding encoding )
Identify	./tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
Indent	./tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
InsertAfterChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertAfterChild	./tinyxml.h	/^	TiXmlNode* InsertAfterChild(  TiXmlNode* afterThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertBeforeChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertBeforeChild	./tinyxml.h	/^	TiXmlNode* InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertEndChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
InsertEndChild	./tinyxml.h	/^	TiXmlNode* InsertEndChild( const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode& addThis )
IntValue	./tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
IntValue	./tinyxml.h	/^	int				IntValue() const;									\/\/\/< Return the value of this attribute, converted to an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
IsAlpha	./tinyxml.h	/^	static int IsAlpha( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
IsAlpha	./tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsAlphaNum	./tinyxml.h	/^	static int IsAlphaNum( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
IsAlphaNum	./tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsWhiteSpace	./tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase	access:protected	signature:( char c )
IsWhiteSpace	./tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
IsWhiteSpaceCondensed	./tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
IterateChildren	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
IterateChildren	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous ) const
IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const char * value, const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * value, const TiXmlNode* previous ) const
IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
Last	./tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
Last	./tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
LastAttribute	./tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
LastAttribute	./tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
LastChild	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
LastChild	./tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
LastChild	./tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
LastChild	./tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild( const char * value ) const;			\/\/\/ The last child of this node matching 'value'. Will be null if there are no children.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
LineBreak	./tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
LinkEndChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
LinkEndChild	./tinyxml.h	/^	TiXmlNode* LinkEndChild( TiXmlNode* addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* addThis )
LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
LoadFile	./tinyxml.h	/^	bool LoadFile( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	./tinyxml.h	/^	bool LoadFile( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	./tinyxml.h	/^	bool LoadFile( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	./tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
MAX_ENTITY_LENGTH	./tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon3
NUM_ENTITY	./tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon3
Name	./tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
NameTStr	./tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
Next	./tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
Next	./tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
Next	./tinyxml.h	/^	const TiXmlAttribute* Next() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
NextSibling	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
NextSiblingElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSiblingElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
NoChildren	./tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Node	./tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
NodeType	./tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode	access:public
NullLineEndings	./xmltest.cpp	/^void NullLineEndings( char* p )$/;"	f	signature:( char* p )
Parent	./tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
Parent	./tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Parse	./tinyxml.h	/^	virtual const char* Parse(	const char* p, $/;"	p	class:TiXmlBase	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlAttribute	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlComment	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlText	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlUnknown	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Previous	./tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
Previous	./tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
Previous	./tinyxml.h	/^	const TiXmlAttribute* Previous() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
PreviousSibling	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Print	./tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	./tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	./tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const = 0;$/;"	p	class:TiXmlBase	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlComment	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlElement	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlText	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( FILE* cfile, int depth ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth = 0 ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* cfile, int depth = 0 ) const
Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
Print	./tinyxml.h	/^	void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
Print	./tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
QueryBoolAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
QueryBoolAttribute	./tinyxml.h	/^	int QueryBoolAttribute( const char* name, bool* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, bool* _value ) const
QueryDoubleAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
QueryDoubleAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
QueryDoubleAttribute	./tinyxml.h	/^	int QueryDoubleAttribute( const char* name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* _value ) const
QueryDoubleAttribute	./tinyxml.h	/^	int QueryDoubleAttribute( const std::string& name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* _value ) const
QueryDoubleValue	./tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
QueryDoubleValue	./tinyxml.h	/^	int QueryDoubleValue( double* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( double* _value ) const
QueryFloatAttribute	./tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
QueryIntAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
QueryIntAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
QueryIntAttribute	./tinyxml.h	/^	int QueryIntAttribute( const char* name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* _value ) const
QueryIntAttribute	./tinyxml.h	/^	int QueryIntAttribute( const std::string& name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* _value ) const
QueryIntValue	./tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
QueryIntValue	./tinyxml.h	/^	int QueryIntValue( int* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( int* _value ) const
QueryStringAttribute	./tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, std::string* _value ) const
QueryUnsignedAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
QueryUnsignedAttribute	./tinyxml.h	/^	int QueryUnsignedAttribute( const char* name, unsigned* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, unsigned* _value ) const
QueryValueAttribute	./tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, std::string* outValue ) const
QueryValueAttribute	./tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
ReadName	./tinyxml.h	/^	static const char* ReadName( const char* p, TIXML_STRING* name, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, TIXML_STRING* name, TiXmlEncoding encoding )
ReadName	./tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
ReadText	./tinyxml.h	/^	static const char* ReadText(	const char* in,				\/\/ where to start$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, TIXML_STRING* text, bool ignoreWhiteSpace, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
ReadText	./tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
ReadValue	./tinyxml.h	/^	const char* ReadValue( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:protected	signature:( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding )
ReadValue	./tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Remove	./tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
Remove	./tinyxml.h	/^	void Remove( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
RemoveAttribute	./tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
RemoveAttribute	./tinyxml.h	/^	void RemoveAttribute( const char * name );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name )
RemoveAttribute	./tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
RemoveChild	./tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
RemoveChild	./tinyxml.h	/^	bool RemoveChild( TiXmlNode* removeThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* removeThis )
Rep	./tinystr.h	/^	struct Rep$/;"	s	class:TiXmlString	access:private
ReplaceChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
ReplaceChild	./tinyxml.h	/^	TiXmlNode* ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
RootElement	./tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
RootElement	./tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Row	./tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
SaveFile	./tinyxml.h	/^	bool SaveFile( FILE* ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* ) const
SaveFile	./tinyxml.h	/^	bool SaveFile( const char * filename ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename ) const
SaveFile	./tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
SaveFile	./tinyxml.h	/^	bool SaveFile() const;$/;"	p	class:TiXmlDocument	access:public	signature:() const
SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
SetAttribute	./tinyxml.h	/^	void SetAttribute( const char * name, int value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, int value )
SetAttribute	./tinyxml.h	/^	void SetAttribute( const char* name, const char * _value );$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, const char * _value )
SetAttribute	./tinyxml.h	/^	void SetAttribute( const std::string& name, const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, const std::string& _value )
SetAttribute	./tinyxml.h	/^	void SetAttribute( const std::string& name, int _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int _value )
SetCDATA	./tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
SetCondenseWhiteSpace	./tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
SetDocument	./tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
SetDoubleAttribute	./tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
SetDoubleAttribute	./tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
SetDoubleAttribute	./tinyxml.h	/^	void SetDoubleAttribute( const char * name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, double value )
SetDoubleAttribute	./tinyxml.h	/^	void SetDoubleAttribute( const std::string& name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double value )
SetDoubleValue	./tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
SetDoubleValue	./tinyxml.h	/^	void SetDoubleValue( double _value );								\/\/\/< Set the value from a double.$/;"	p	class:TiXmlAttribute	access:public	signature:( double _value )
SetError	./tinyxml.h	/^	void SetError( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlDocument	access:public	signature:( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding )
SetError	./tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
SetIndent	./tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
SetIntValue	./tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
SetIntValue	./tinyxml.h	/^	void SetIntValue( int _value );										\/\/\/< Set the value from an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:( int _value )
SetLineBreak	./tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
SetName	./tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
SetName	./tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
SetStreamPrinting	./tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
SetTabSize	./tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
SetUserData	./tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
SetValue	./tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
SetValue	./tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
SetValue	./tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
SetValue	./tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
Size	./tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
SkipWhiteSpace	./tinyxml.h	/^	static const char* SkipWhiteSpace( const char*, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char*, TiXmlEncoding encoding )
SkipWhiteSpace	./tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
Stamp	./tinyxmlparser.cpp	/^	void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
Stamp	./tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
Standalone	./tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Str	./tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlComment	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDeclaration	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDocument	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlElement	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlText	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlUnknown	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream* in, TIXML_STRING* tag ) = 0;$/;"	p	class:TiXmlNode	access:protected	signature:( std::istream* in, TIXML_STRING* tag )
StreamIn	./tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
StreamIn	./tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
StreamTo	./tinyxml.h	/^	static bool StreamTo( std::istream * in, int character, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamTo	./tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamWhiteSpace	./tinyxml.h	/^	static bool	StreamWhiteSpace( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamWhiteSpace	./tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
StringEqual	./tinyxml.h	/^	static bool StringEqual(	const char* p,$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
StringEqual	./tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TINYXML_COMMENT	./tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DECLARATION	./tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DOCUMENT	./tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_ELEMENT	./tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_INCLUDED	./tinyxml.h	27;"	d
TINYXML_TEXT	./tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_TYPECOUNT	./tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TINYXML_UNKNOWN	./tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TIXML_DEFAULT_ENCODING	./tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	./tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	./tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	./tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	./tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_DOCUMENT_EMPTY	./tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_DOCUMENT_TOP_ONLY	./tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_EMBEDDED_NULL	./tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	./tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_OPENING_FILE	./tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_CDATA	./tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_COMMENT	./tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_DECLARATION	./tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_ELEMENT	./tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_EMPTY	./tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_UNKNOWN	./tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_ATTRIBUTES	./tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_ELEMENT_VALUE	./tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_END_TAG	./tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_STRING_COUNT	./tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon2
TIXML_EXPLICIT	./tinystr.h	39;"	d
TIXML_EXPLICIT	./tinystr.h	42;"	d
TIXML_EXPLICIT	./tinystr.h	44;"	d
TIXML_LOG	./tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	./tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	./tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	./tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v
TIXML_NO_ATTRIBUTE	./tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon1
TIXML_NO_ERROR	./tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon2
TIXML_PATCH_VERSION	./tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v
TIXML_SAFE	./tinyxml.h	60;"	d
TIXML_SNPRINTF	./tinyxml.h	65;"	d
TIXML_SNPRINTF	./tinyxml.h	70;"	d
TIXML_SNPRINTF	./tinyxml.h	75;"	d
TIXML_SNPRINTF	./tinyxml.h	78;"	d
TIXML_SSCANF	./tinyxml.h	66;"	d
TIXML_SSCANF	./tinyxml.h	71;"	d
TIXML_SSCANF	./tinyxml.h	76;"	d
TIXML_SSCANF	./tinyxml.h	79;"	d
TIXML_STRING	./tinyxml.h	50;"	d
TIXML_STRING	./tinyxml.h	53;"	d
TIXML_STRING_INCLUDED	./tinystr.h	28;"	d
TIXML_SUCCESS	./tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon1
TIXML_UTF_LEAD_0	./tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	./tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	./tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	./tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon1
TabSize	./tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Text	./tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const TiXmlAttribute& );				\/\/ not implemented.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& )
TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute	./tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlAttribute::DoubleValue	./tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::DoubleValue	./tinyxml.h	/^	double			DoubleValue() const;								\/\/\/< Return the value of this attribute, converted to a double.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::IntValue	./tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::IntValue	./tinyxml.h	/^	int				IntValue() const;									\/\/\/< Return the value of this attribute, converted to an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Name	./tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::NameTStr	./tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Next	./tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Next	./tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Next	./tinyxml.h	/^	const TiXmlAttribute* Next() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlAttribute	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Parse	./tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Previous	./tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Previous	./tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Previous	./tinyxml.h	/^	const TiXmlAttribute* Previous() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Print	./tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlAttribute::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
TiXmlAttribute::Print	./tinyxml.h	/^	void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
TiXmlAttribute::QueryDoubleValue	./tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
TiXmlAttribute::QueryDoubleValue	./tinyxml.h	/^	int QueryDoubleValue( double* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( double* _value ) const
TiXmlAttribute::QueryIntValue	./tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
TiXmlAttribute::QueryIntValue	./tinyxml.h	/^	int QueryIntValue( int* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( int* _value ) const
TiXmlAttribute::SetDocument	./tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
TiXmlAttribute::SetDoubleValue	./tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
TiXmlAttribute::SetDoubleValue	./tinyxml.h	/^	void SetDoubleValue( double _value );								\/\/\/< Set the value from a double.$/;"	p	class:TiXmlAttribute	access:public	signature:( double _value )
TiXmlAttribute::SetIntValue	./tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
TiXmlAttribute::SetIntValue	./tinyxml.h	/^	void SetIntValue( int _value );										\/\/\/< Set the value from an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:( int _value )
TiXmlAttribute::SetName	./tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
TiXmlAttribute::SetName	./tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
TiXmlAttribute::SetValue	./tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
TiXmlAttribute::SetValue	./tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
TiXmlAttribute::TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const TiXmlAttribute& );				\/\/ not implemented.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& )
TiXmlAttribute::TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute::TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute::TiXmlAttribute	./tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Value	./tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::ValueStr	./tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::document	./tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::name	./tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::next	./tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::operator <	./tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator =	./tinyxml.h	/^	void operator=( const TiXmlAttribute& base );	\/\/ not allowed.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& base )
TiXmlAttribute::operator ==	./tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator >	./tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::prev	./tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::value	./tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttributeSet	./tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet	./tinyxml.h	/^	TiXmlAttributeSet( const TiXmlAttributeSet& );	\/\/ not allowed$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet	./tinyxml.h	/^	TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet	./tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlAttributeSet::Add	./tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
TiXmlAttributeSet::Add	./tinyxml.h	/^	void Add( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
TiXmlAttributeSet::Find	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
TiXmlAttributeSet::Find	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
TiXmlAttributeSet::Find	./tinyxml.h	/^	TiXmlAttribute*	Find( const char* _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name ) const
TiXmlAttributeSet::Find	./tinyxml.h	/^	TiXmlAttribute*	Find( const std::string& _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name ) const
TiXmlAttributeSet::FindOrCreate	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
TiXmlAttributeSet::FindOrCreate	./tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
TiXmlAttributeSet::FindOrCreate	./tinyxml.h	/^	TiXmlAttribute* FindOrCreate( const char* _name );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name )
TiXmlAttributeSet::FindOrCreate	./tinyxml.h	/^	TiXmlAttribute* FindOrCreate( const std::string& _name );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name )
TiXmlAttributeSet::First	./tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::First	./tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Last	./tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::Last	./tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Remove	./tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
TiXmlAttributeSet::Remove	./tinyxml.h	/^	void Remove( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
TiXmlAttributeSet::TiXmlAttributeSet	./tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::TiXmlAttributeSet	./tinyxml.h	/^	TiXmlAttributeSet( const TiXmlAttributeSet& );	\/\/ not allowed$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet::TiXmlAttributeSet	./tinyxml.h	/^	TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::operator =	./tinyxml.h	/^	void operator=( const TiXmlAttributeSet& );	\/\/ not allowed (as TiXmlAttribute)$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet::sentinel	./tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
TiXmlAttributeSet::~TiXmlAttributeSet	./tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::~TiXmlAttributeSet	./tinyxml.h	/^	~TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlBase	./tinyxml.h	/^	TiXmlBase( const TiXmlBase& );				\/\/ not implemented.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& )
TiXmlBase	./tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase	./tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlBase::Column	./tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::ConvertUTF32ToUTF8	./tinyxml.h	/^	static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned long input, char* output, int* length )
TiXmlBase::ConvertUTF32ToUTF8	./tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
TiXmlBase::EncodeString	./tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
TiXmlBase::EncodeString	./tinyxml.h	/^	static void EncodeString( const TIXML_STRING& str, TIXML_STRING* out );$/;"	p	class:TiXmlBase	access:public	signature:( const TIXML_STRING& str, TIXML_STRING* out )
TiXmlBase::Entity	./tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase	access:private
TiXmlBase::Entity::chr	./tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::str	./tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::strLength	./tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::GetChar	./tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetEntity	./tinyxml.h	/^	static const char* GetEntity( const char* in, char* value, int* length, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetEntity	./tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetUserData	./tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::GetUserData	./tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::IsAlpha	./tinyxml.h	/^	static int IsAlpha( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
TiXmlBase::IsAlpha	./tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsAlphaNum	./tinyxml.h	/^	static int IsAlphaNum( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
TiXmlBase::IsAlphaNum	./tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsWhiteSpace	./tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase	access:protected	signature:( char c )
TiXmlBase::IsWhiteSpace	./tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
TiXmlBase::IsWhiteSpaceCondensed	./tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::MAX_ENTITY_LENGTH	./tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon3
TiXmlBase::NUM_ENTITY	./tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon3
TiXmlBase::Parse	./tinyxml.h	/^	virtual const char* Parse(	const char* p, $/;"	p	class:TiXmlBase	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlBase::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const = 0;$/;"	p	class:TiXmlBase	access:public	signature:( FILE* cfile, int depth ) const
TiXmlBase::ReadName	./tinyxml.h	/^	static const char* ReadName( const char* p, TIXML_STRING* name, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, TIXML_STRING* name, TiXmlEncoding encoding )
TiXmlBase::ReadName	./tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
TiXmlBase::ReadText	./tinyxml.h	/^	static const char* ReadText(	const char* in,				\/\/ where to start$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, TIXML_STRING* text, bool ignoreWhiteSpace, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::ReadText	./tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
TiXmlBase::Row	./tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::SetCondenseWhiteSpace	./tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
TiXmlBase::SetUserData	./tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
TiXmlBase::SkipWhiteSpace	./tinyxml.h	/^	static const char* SkipWhiteSpace( const char*, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char*, TiXmlEncoding encoding )
TiXmlBase::SkipWhiteSpace	./tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
TiXmlBase::StreamTo	./tinyxml.h	/^	static bool StreamTo( std::istream * in, int character, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamTo	./tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	./tinyxml.h	/^	static bool	StreamWhiteSpace( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	./tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StringEqual	./tinyxml.h	/^	static bool StringEqual(	const char* p,$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::StringEqual	./tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::TIXML_ERROR	./tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_DOCUMENT_EMPTY	./tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_DOCUMENT_TOP_ONLY	./tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_EMBEDDED_NULL	./tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	./tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_OPENING_FILE	./tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_CDATA	./tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_COMMENT	./tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_DECLARATION	./tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_ELEMENT	./tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_EMPTY	./tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_PARSING_UNKNOWN	./tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_READING_ATTRIBUTES	./tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_READING_ELEMENT_VALUE	./tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_READING_END_TAG	./tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_ERROR_STRING_COUNT	./tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TIXML_NO_ERROR	./tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon2
TiXmlBase::TiXmlBase	./tinyxml.h	/^	TiXmlBase( const TiXmlBase& );				\/\/ not implemented.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& )
TiXmlBase::TiXmlBase	./tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::ToLower	./tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
TiXmlBase::condenseWhiteSpace	./tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
TiXmlBase::condenseWhiteSpace	./tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	./tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	./tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::errorString	./tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::errorString	./tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
TiXmlBase::location	./tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::operator =	./tinyxml.h	/^	void operator=( const TiXmlBase& base );	\/\/ not allowed.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& base )
TiXmlBase::userData	./tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::utf8ByteTable	./tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
TiXmlBase::utf8ByteTable	./tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::~TiXmlBase	./tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlComment	./tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment	./tinyxml.h	/^	TiXmlComment( const TiXmlComment& );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& )
TiXmlComment	./tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment	./tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment	./tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlComment::Accept	./tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlComment	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
TiXmlComment::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlComment	access:public	signature:() const
TiXmlComment::CopyTo	./tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
TiXmlComment::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlComment* target ) const;$/;"	p	class:TiXmlComment	access:protected	signature:( TiXmlComment* target ) const
TiXmlComment::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlComment	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Parse	./tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Print	./tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
TiXmlComment::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlComment	access:public	signature:( FILE* cfile, int depth ) const
TiXmlComment::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlComment	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::StreamIn	./tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::TiXmlComment	./tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment::TiXmlComment	./tinyxml.h	/^	TiXmlComment( const TiXmlComment& );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& )
TiXmlComment::TiXmlComment	./tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment::TiXmlComment	./tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	./tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	./tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
TiXmlComment::operator =	./tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
TiXmlComment::operator =	./tinyxml.h	/^	TiXmlComment& operator=( const TiXmlComment& base );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& base )
TiXmlComment::~TiXmlComment	./tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlCursor	./tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor	./tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlCursor::Clear	./tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::TiXmlCursor	./tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::col	./tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlCursor::row	./tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration(	const char* _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* _version, const char* _encoding, const char* _standalone )
TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration(	const std::string& _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration	./tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDeclaration::Accept	./tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
TiXmlDeclaration::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::CopyTo	./tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlDeclaration* target ) const;$/;"	p	class:TiXmlDeclaration	access:protected	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::Encoding	./tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDeclaration::Parse	./tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
TiXmlDeclaration::Print	./tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlDeclaration::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
TiXmlDeclaration::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
TiXmlDeclaration::Standalone	./tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDeclaration	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::StreamIn	./tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration(	const char* _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* _version, const char* _encoding, const char* _standalone )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration(	const std::string& _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	./tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	./tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	./tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Version	./tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::encoding	./tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::operator =	./tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::operator =	./tinyxml.h	/^	TiXmlDeclaration& operator=( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::standalone	./tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::version	./tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::~TiXmlDeclaration	./tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const char * documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * documentName )
TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const std::string& documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const std::string& documentName )
TiXmlDocument	./tinyxml.h	/^	TiXmlDocument();$/;"	p	class:TiXmlDocument	access:public	signature:()
TiXmlDocument	./tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDocument::Accept	./tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
TiXmlDocument::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlVisitor* content ) const
TiXmlDocument::ClearError	./tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDocument	access:protected	signature:() const
TiXmlDocument::CopyTo	./tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
TiXmlDocument::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlDocument* target ) const;$/;"	p	class:TiXmlDocument	access:private	signature:( TiXmlDocument* target ) const
TiXmlDocument::Error	./tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorCol	./tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorDesc	./tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorId	./tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorRow	./tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./tinyxml.h	/^	bool LoadFile( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	./tinyxml.h	/^	bool LoadFile( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	./tinyxml.h	/^	bool LoadFile( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	./tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::Parse	./tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::Print	./tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
TiXmlDocument::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth = 0 ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* cfile, int depth = 0 ) const
TiXmlDocument::Print	./tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::RootElement	./tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::RootElement	./tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
TiXmlDocument::SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
TiXmlDocument::SaveFile	./tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::SaveFile	./tinyxml.h	/^	bool SaveFile( FILE* ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* ) const
TiXmlDocument::SaveFile	./tinyxml.h	/^	bool SaveFile( const char * filename ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename ) const
TiXmlDocument::SaveFile	./tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
TiXmlDocument::SaveFile	./tinyxml.h	/^	bool SaveFile() const;$/;"	p	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::SetError	./tinyxml.h	/^	void SetError( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlDocument	access:public	signature:( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::SetError	./tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDocument::SetTabSize	./tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
TiXmlDocument::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDocument	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::StreamIn	./tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::TabSize	./tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	./tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument::TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const char * documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	./tinyxml.h	/^	TiXmlDocument( const std::string& documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	./tinyxml.h	/^	TiXmlDocument();$/;"	p	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::ToDocument	./tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::ToDocument	./tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::error	./tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorDesc	./tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorId	./tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorLocation	./tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::operator =	./tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::operator =	./tinyxml.h	/^	TiXmlDocument& operator=( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument::tabsize	./tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::useMicrosoftBOM	./tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::~TiXmlDocument	./tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement	./tinyxml.h	/^	TiXmlElement (const char * in_value);$/;"	p	class:TiXmlElement	access:public	signature:(const char * in_value)
TiXmlElement	./tinyxml.h	/^	TiXmlElement( const TiXmlElement& );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& )
TiXmlElement	./tinyxml.h	/^	TiXmlElement( const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& _value )
TiXmlElement	./tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlElement::Accept	./tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlElement	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	./tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const char* Attribute( const char* name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const char* Attribute( const char* name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const char* Attribute( const char* name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	./tinyxml.h	/^	const std::string* Attribute( const std::string& name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* i ) const
TiXmlElement::ClearThis	./tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::ClearThis	./tinyxml.h	/^	void ClearThis();	\/\/ like clear, but initializes 'this' object as well$/;"	p	class:TiXmlElement	access:protected	signature:()
TiXmlElement::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
TiXmlElement::CopyTo	./tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
TiXmlElement::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlElement* target ) const;$/;"	p	class:TiXmlElement	access:protected	signature:( TiXmlElement* target ) const
TiXmlElement::FirstAttribute	./tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::FirstAttribute	./tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::GetText	./tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::GetText	./tinyxml.h	/^	const char* GetText() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
TiXmlElement::LastAttribute	./tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::LastAttribute	./tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Parse	./tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Print	./tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
TiXmlElement::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlElement	access:public	signature:( FILE* cfile, int depth ) const
TiXmlElement::QueryBoolAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
TiXmlElement::QueryBoolAttribute	./tinyxml.h	/^	int QueryBoolAttribute( const char* name, bool* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, bool* _value ) const
TiXmlElement::QueryDoubleAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	./tinyxml.h	/^	int QueryDoubleAttribute( const char* name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* _value ) const
TiXmlElement::QueryDoubleAttribute	./tinyxml.h	/^	int QueryDoubleAttribute( const std::string& name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* _value ) const
TiXmlElement::QueryFloatAttribute	./tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
TiXmlElement::QueryIntAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
TiXmlElement::QueryIntAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
TiXmlElement::QueryIntAttribute	./tinyxml.h	/^	int QueryIntAttribute( const char* name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* _value ) const
TiXmlElement::QueryIntAttribute	./tinyxml.h	/^	int QueryIntAttribute( const std::string& name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* _value ) const
TiXmlElement::QueryStringAttribute	./tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, std::string* _value ) const
TiXmlElement::QueryUnsignedAttribute	./tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
TiXmlElement::QueryUnsignedAttribute	./tinyxml.h	/^	int QueryUnsignedAttribute( const char* name, unsigned* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, unsigned* _value ) const
TiXmlElement::QueryValueAttribute	./tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, std::string* outValue ) const
TiXmlElement::QueryValueAttribute	./tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
TiXmlElement::ReadValue	./tinyxml.h	/^	const char* ReadValue( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:protected	signature:( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlElement::ReadValue	./tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::RemoveAttribute	./tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
TiXmlElement::RemoveAttribute	./tinyxml.h	/^	void RemoveAttribute( const char * name );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name )
TiXmlElement::RemoveAttribute	./tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
TiXmlElement::SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
TiXmlElement::SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
TiXmlElement::SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
TiXmlElement::SetAttribute	./tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
TiXmlElement::SetAttribute	./tinyxml.h	/^	void SetAttribute( const char * name, int value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, int value )
TiXmlElement::SetAttribute	./tinyxml.h	/^	void SetAttribute( const char* name, const char * _value );$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, const char * _value )
TiXmlElement::SetAttribute	./tinyxml.h	/^	void SetAttribute( const std::string& name, const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, const std::string& _value )
TiXmlElement::SetAttribute	./tinyxml.h	/^	void SetAttribute( const std::string& name, int _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int _value )
TiXmlElement::SetDoubleAttribute	./tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
TiXmlElement::SetDoubleAttribute	./tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
TiXmlElement::SetDoubleAttribute	./tinyxml.h	/^	void SetDoubleAttribute( const char * name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, double value )
TiXmlElement::SetDoubleAttribute	./tinyxml.h	/^	void SetDoubleAttribute( const std::string& name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double value )
TiXmlElement::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlElement	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlElement::StreamIn	./tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
TiXmlElement::TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement::TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement::TiXmlElement	./tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement::TiXmlElement	./tinyxml.h	/^	TiXmlElement (const char * in_value);$/;"	p	class:TiXmlElement	access:public	signature:(const char * in_value)
TiXmlElement::TiXmlElement	./tinyxml.h	/^	TiXmlElement( const TiXmlElement& );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& )
TiXmlElement::TiXmlElement	./tinyxml.h	/^	TiXmlElement( const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& _value )
TiXmlElement::ToElement	./tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::ToElement	./tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::attributeSet	./tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
TiXmlElement::operator =	./tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
TiXmlElement::operator =	./tinyxml.h	/^	TiXmlElement& operator=( const TiXmlElement& base );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& base )
TiXmlElement::~TiXmlElement	./tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::~TiXmlElement	./tinyxml.h	/^	virtual ~TiXmlElement();$/;"	p	class:TiXmlElement	access:public	signature:()
TiXmlEncoding	./tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	./tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f	signature:( const char* filename, const char* mode )
TiXmlFOpen	./tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode );$/;"	p	file:	signature:( const char* filename, const char* mode )
TiXmlHandle	./tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle	./tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle	./tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlHandle::Child	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::Child	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::Child	./tinyxml.h	/^	TiXmlHandle Child( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
TiXmlHandle::Child	./tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::Child	./tinyxml.h	/^	TiXmlHandle Child( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
TiXmlHandle::ChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::ChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
TiXmlHandle::ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::ChildElement	./tinyxml.h	/^	TiXmlHandle ChildElement( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
TiXmlHandle::Element	./tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::FirstChild	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChild	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
TiXmlHandle::FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::FirstChild	./tinyxml.h	/^	TiXmlHandle FirstChild() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::FirstChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	./tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::FirstChildElement	./tinyxml.h	/^	TiXmlHandle FirstChildElement() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Node	./tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Text	./tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::TiXmlHandle	./tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle::TiXmlHandle	./tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle::ToElement	./tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToNode	./tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToText	./tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToUnknown	./tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Unknown	./tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::node	./tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
TiXmlHandle::operator =	./tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlNode	./tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode	./tinyxml.h	/^	TiXmlNode( NodeType _type );$/;"	p	class:TiXmlNode	access:protected	signature:( NodeType _type )
TiXmlNode	./tinyxml.h	/^	TiXmlNode( const TiXmlNode& );				\/\/ not implemented.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& )
TiXmlNode	./tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlNode::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* visitor ) const = 0;$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlNode::Clear	./tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::Clear	./tinyxml.h	/^	void Clear();$/;"	p	class:TiXmlNode	access:public	signature:()
TiXmlNode::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const = 0;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::CopyTo	./tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
TiXmlNode::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlNode* target ) const;$/;"	p	class:TiXmlNode	access:protected	signature:( TiXmlNode* target ) const
TiXmlNode::FirstChild	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChild	./tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild( const char * value ) const;			\/\/\/< The first child of this node with the matching 'value'. Will be null if none found.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
TiXmlNode::FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::FirstChild	./tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::FirstChildElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChildElement	./tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement( const char * _value ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::FirstChildElement	./tinyxml.h	/^	const TiXmlElement* FirstChildElement()	const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::GetDocument	./tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::GetDocument	./tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::GetDocument	./tinyxml.h	/^	const TiXmlDocument* GetDocument() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Identify	./tinyxml.h	/^	TiXmlNode* Identify( const char* start, TiXmlEncoding encoding );$/;"	p	class:TiXmlNode	access:protected	signature:( const char* start, TiXmlEncoding encoding )
TiXmlNode::Identify	./tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
TiXmlNode::InsertAfterChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertAfterChild	./tinyxml.h	/^	TiXmlNode* InsertAfterChild(  TiXmlNode* afterThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	./tinyxml.h	/^	TiXmlNode* InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	./tinyxml.h	/^	TiXmlNode* InsertEndChild( const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode& addThis )
TiXmlNode::IterateChildren	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
TiXmlNode::IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	./tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const char * value, const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * value, const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
TiXmlNode::LastChild	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::LastChild	./tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::LastChild	./tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::LastChild	./tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild( const char * value ) const;			\/\/\/ The last child of this node matching 'value'. Will be null if there are no children.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
TiXmlNode::LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::LastChild	./tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::LinkEndChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
TiXmlNode::LinkEndChild	./tinyxml.h	/^	TiXmlNode* LinkEndChild( TiXmlNode* addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* addThis )
TiXmlNode::NextSibling	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
TiXmlNode::NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSibling	./tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NextSibling	./tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NextSiblingElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSiblingElement	./tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NextSiblingElement	./tinyxml.h	/^	const TiXmlElement* NextSiblingElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NoChildren	./tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NodeType	./tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode	access:public
TiXmlNode::Parent	./tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::Parent	./tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::PreviousSibling	./tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
TiXmlNode::PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::PreviousSibling	./tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::PreviousSibling	./tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::RemoveChild	./tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
TiXmlNode::RemoveChild	./tinyxml.h	/^	bool RemoveChild( TiXmlNode* removeThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* removeThis )
TiXmlNode::ReplaceChild	./tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::ReplaceChild	./tinyxml.h	/^	TiXmlNode* ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::SetValue	./tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::SetValue	./tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
TiXmlNode::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream* in, TIXML_STRING* tag ) = 0;$/;"	p	class:TiXmlNode	access:protected	signature:( std::istream* in, TIXML_STRING* tag )
TiXmlNode::TINYXML_COMMENT	./tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_DECLARATION	./tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_DOCUMENT	./tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_ELEMENT	./tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_TEXT	./tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_TYPECOUNT	./tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_UNKNOWN	./tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TiXmlNode	./tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode::TiXmlNode	./tinyxml.h	/^	TiXmlNode( NodeType _type );$/;"	p	class:TiXmlNode	access:protected	signature:( NodeType _type )
TiXmlNode::TiXmlNode	./tinyxml.h	/^	TiXmlNode( const TiXmlNode& );				\/\/ not implemented.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& )
TiXmlNode::ToComment	./tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToComment	./tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDeclaration	./tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDeclaration	./tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDocument	./tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDocument	./tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToElement	./tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToElement	./tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToText	./tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToText	./tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToUnknown	./tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToUnknown	./tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Type	./tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Value	./tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueStr	./tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueTStr	./tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::firstChild	./tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::lastChild	./tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::next	./tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::operator <<	./tinyxml.h	/^		friend std::string& operator<< (std::string& out, const TiXmlNode& base );$/;"	p	class:TiXmlNode	access:friend	signature:(std::string& out, const TiXmlNode& base )
TiXmlNode::operator <<	./tinyxml.h	/^	    friend std::ostream& operator<< (std::ostream& out, const TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::ostream& out, const TiXmlNode& base)
TiXmlNode::operator =	./tinyxml.h	/^	void operator=( const TiXmlNode& base );	\/\/ not allowed.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& base )
TiXmlNode::operator >>	./tinyxml.h	/^	    friend std::istream& operator >> (std::istream& in, TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::istream& in, TiXmlNode& base)
TiXmlNode::parent	./tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::prev	./tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::type	./tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::value	./tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::~TiXmlNode	./tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::~TiXmlNode	./tinyxml.h	/^	virtual ~TiXmlNode();$/;"	p	class:TiXmlNode	access:public	signature:()
TiXmlOutStream	./tinystr.h	/^class TiXmlOutStream : public TiXmlString$/;"	c	inherits:TiXmlString
TiXmlOutStream::operator <<	./tinystr.h	/^	TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const TiXmlString & in)
TiXmlOutStream::operator <<	./tinystr.h	/^	TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const char * in)
TiXmlParsingData	./tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData	./tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlParsingData::Cursor	./tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:() const
TiXmlParsingData::Stamp	./tinyxmlparser.cpp	/^	void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::Stamp	./tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::TiXmlParsingData	./tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData::cursor	./tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::stamp	./tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::tabsize	./tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlPrinter	./tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter	./tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c	inherits:TiXmlVisitor
TiXmlPrinter::CStr	./tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::DoIndent	./tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::DoLineBreak	./tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::Indent	./tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::LineBreak	./tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::SetIndent	./tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
TiXmlPrinter::SetLineBreak	./tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
TiXmlPrinter::SetStreamPrinting	./tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Size	./tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Str	./tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::TiXmlPrinter	./tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlComment& comment );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& declaration );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlText& text );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& unknown );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::VisitEnter	./tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitEnter	./tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
TiXmlPrinter::VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitExit	./tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitExit	./tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
TiXmlPrinter::VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
TiXmlPrinter::VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& element );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element )
TiXmlPrinter::buffer	./tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::depth	./tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::indent	./tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::lineBreak	./tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::simpleTextPrint	./tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
TiXmlString	./tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * copy)
TiXmlString	./tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * str, size_type len)
TiXmlString	./tinystr.h	/^	TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const TiXmlString & copy)
TiXmlString	./tinystr.h	/^	TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString	./tinystr.h	/^class TiXmlString$/;"	c
TiXmlString::Rep	./tinystr.h	/^	struct Rep$/;"	s	class:TiXmlString	access:private
TiXmlString::Rep::capacity	./tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::Rep::size	./tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::Rep::str	./tinystr.h	/^		char str[1];$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::TiXmlString	./tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * copy)
TiXmlString::TiXmlString	./tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * str, size_type len)
TiXmlString::TiXmlString	./tinystr.h	/^	TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const TiXmlString & copy)
TiXmlString::TiXmlString	./tinystr.h	/^	TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString::append	./tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::append	./tinystr.h	/^	TiXmlString& append (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
TiXmlString::assign	./tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::assign	./tinystr.h	/^	TiXmlString& assign (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
TiXmlString::at	./tinystr.h	/^	const char& at (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
TiXmlString::c_str	./tinystr.h	/^	const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::capacity	./tinystr.h	/^	size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::clear	./tinystr.h	/^	void clear ()$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString::data	./tinystr.h	/^	const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::empty	./tinystr.h	/^	bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::find	./tinystr.h	/^	size_type find (char lookup) const$/;"	f	class:TiXmlString	access:public	signature:(char lookup) const
TiXmlString::find	./tinystr.h	/^	size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString	access:public	signature:(char tofind, size_type offset) const
TiXmlString::finish	./tinystr.h	/^	char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString	access:private	signature:() const
TiXmlString::init	./tinystr.h	/^	void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
TiXmlString::init	./tinystr.h	/^	void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString	access:private	signature:(size_type sz, size_type cap)
TiXmlString::length	./tinystr.h	/^	size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::npos	./tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
TiXmlString::npos	./tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString	access:public
TiXmlString::nullrep_	./tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
TiXmlString::nullrep_	./tinystr.h	/^	static Rep nullrep_;$/;"	m	class:TiXmlString	access:private
TiXmlString::operator +=	./tinystr.h	/^	TiXmlString& operator += (char single)$/;"	f	class:TiXmlString	access:public	signature:(char single)
TiXmlString::operator +=	./tinystr.h	/^	TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & suffix)
TiXmlString::operator +=	./tinystr.h	/^	TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString	access:public	signature:(const char * suffix)
TiXmlString::operator =	./tinystr.h	/^	TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & copy)
TiXmlString::operator =	./tinystr.h	/^	TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString	access:public	signature:(const char * copy)
TiXmlString::operator []	./tinystr.h	/^	char& operator [] (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
TiXmlString::quit	./tinystr.h	/^	void quit()$/;"	f	class:TiXmlString	access:private	signature:()
TiXmlString::rep_	./tinystr.h	/^	Rep * rep_;$/;"	m	class:TiXmlString	access:private
TiXmlString::reserve	./tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString	signature:(size_type cap)
TiXmlString::reserve	./tinystr.h	/^	void reserve (size_type cap);$/;"	p	class:TiXmlString	access:public	signature:(size_type cap)
TiXmlString::set_size	./tinystr.h	/^	void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
TiXmlString::size	./tinystr.h	/^	size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::size_type	./tinystr.h	/^  	typedef size_t size_type;$/;"	t	class:TiXmlString	access:public
TiXmlString::start	./tinystr.h	/^	char* start() const { return rep_->str; }$/;"	f	class:TiXmlString	access:private	signature:() const
TiXmlString::swap	./tinystr.h	/^	void swap (TiXmlString& other)$/;"	f	class:TiXmlString	access:public	signature:(TiXmlString& other)
TiXmlString::~TiXmlString	./tinystr.h	/^	~TiXmlString ()$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlText	./tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText	./tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText	./tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText	./tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlText::Accept	./tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
TiXmlText::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlText	access:public	signature:( TiXmlVisitor* content ) const
TiXmlText::Blank	./tinyxml.h	/^	bool Blank() const;	\/\/ returns true if all white space and new lines$/;"	p	class:TiXmlText	access:protected	signature:() const
TiXmlText::Blank	./tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::CDATA	./tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlText	access:protected	signature:() const
TiXmlText::CopyTo	./tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
TiXmlText::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlText* target ) const;$/;"	p	class:TiXmlText	access:protected	signature:( TiXmlText* target ) const
TiXmlText::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlText	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Parse	./tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Print	./tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
TiXmlText::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlText	access:public	signature:( FILE* cfile, int depth ) const
TiXmlText::SetCDATA	./tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
TiXmlText::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlText	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlText::StreamIn	./tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlText::TiXmlText	./tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText::TiXmlText	./tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText::TiXmlText	./tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText::ToText	./tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlText::ToText	./tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::cdata	./tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
TiXmlText::operator =	./tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
TiXmlText::~TiXmlText	./tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlUnknown	./tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown	./tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown	./tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlUnknown::Accept	./tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
TiXmlUnknown::Accept	./tinyxml.h	/^	virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( TiXmlVisitor* content ) const
TiXmlUnknown::Clone	./tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
TiXmlUnknown::Clone	./tinyxml.h	/^	virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlUnknown	access:public	signature:() const
TiXmlUnknown::CopyTo	./tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::CopyTo	./tinyxml.h	/^	void CopyTo( TiXmlUnknown* target ) const;$/;"	p	class:TiXmlUnknown	access:protected	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::Parse	./tinyxml.h	/^	virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlUnknown	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Parse	./tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Print	./tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::Print	./tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::StreamIn	./tinyxml.h	/^	virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlUnknown	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown::StreamIn	./tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown::TiXmlUnknown	./tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::TiXmlUnknown	./tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	./tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	./tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
TiXmlUnknown::operator =	./tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::~TiXmlUnknown	./tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlVisitor	./tinyxml.h	/^class TiXmlVisitor$/;"	c
TiXmlVisitor::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
TiXmlVisitor::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
TiXmlVisitor::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
TiXmlVisitor::Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
TiXmlVisitor::VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
TiXmlVisitor::VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
TiXmlVisitor::~TiXmlVisitor	./tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
ToComment	./tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
ToComment	./tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToComment	./tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToComment	./tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
ToDeclaration	./tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
ToDeclaration	./tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDeclaration	./tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDeclaration	./tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
ToDocument	./tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
ToDocument	./tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDocument	./tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDocument	./tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
ToElement	./tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToElement	./tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
ToElement	./tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToElement	./tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToElement	./tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
ToLower	./tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
ToNode	./tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
ToText	./tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToText	./tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToText	./tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
ToText	./tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToText	./tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
ToUnknown	./tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToUnknown	./tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
ToUnknown	./tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToUnknown	./tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
ToUnknown	./tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
Type	./tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Unknown	./tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
Value	./tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
Value	./tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueStr	./tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueStr	./tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
ValueTStr	./tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Version	./tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
Visit	./tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlComment& comment );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlComment& comment )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& declaration );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDeclaration& declaration )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlText& text );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlText& text )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
Visit	./tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& unknown );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlUnknown& unknown )
VisitEnter	./tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitEnter	./tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
VisitEnter	./tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitExit	./tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitExit	./tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
VisitExit	./tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& element );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element )
XmlTest	./xmltest.cpp	/^bool XmlTest (const char* testString, const char* expected, const char* found, bool noEcho )$/;"	f	signature:(const char* testString, const char* expected, const char* found, bool noEcho )
XmlTest	./xmltest.cpp	/^bool XmlTest (const char* testString, const char* expected, const char* found, bool noEcho = false);$/;"	p	file:	signature:(const char* testString, const char* expected, const char* found, bool noEcho = false)
XmlTest	./xmltest.cpp	/^bool XmlTest( const char* testString, int expected, int found, bool noEcho )$/;"	f	signature:( const char* testString, int expected, int found, bool noEcho )
XmlTest	./xmltest.cpp	/^bool XmlTest( const char* testString, int expected, int found, bool noEcho = false );$/;"	p	file:	signature:( const char* testString, int expected, int found, bool noEcho = false )
append	./tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
append	./tinystr.h	/^	TiXmlString& append (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
assign	./tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
assign	./tinystr.h	/^	TiXmlString& assign (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
at	./tinystr.h	/^	const char& at (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
attributeSet	./tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
buffer	./tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
c_str	./tinystr.h	/^	const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
capacity	./tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
capacity	./tinystr.h	/^	size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString	access:public	signature:() const
cdata	./tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
chr	./tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity	access:public
clear	./tinystr.h	/^	void clear ()$/;"	f	class:TiXmlString	access:public	signature:()
col	./tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
condenseWhiteSpace	./tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
condenseWhiteSpace	./tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
cursor	./tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
data	./tinystr.h	/^	const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
depth	./tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter	access:private
document	./tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
empty	./tinystr.h	/^	bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString	access:public	signature:() const
encoding	./tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
endMemState	./xmltest.cpp	/^	_CrtMemState endMemState;$/;"	v
entity	./tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
entity	./tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
error	./tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument	access:private
errorDesc	./tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
errorId	./tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument	access:private
errorLocation	./tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
errorString	./tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
errorString	./tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
find	./tinystr.h	/^	size_type find (char lookup) const$/;"	f	class:TiXmlString	access:public	signature:(char lookup) const
find	./tinystr.h	/^	size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString	access:public	signature:(char tofind, size_type offset) const
finish	./tinystr.h	/^	char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString	access:private	signature:() const
firstChild	./tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode	access:protected
gFail	./xmltest.cpp	/^static int gFail = 0;$/;"	v	file:
gPass	./xmltest.cpp	/^static int gPass = 0;$/;"	v	file:
indent	./tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
init	./tinystr.h	/^	void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
init	./tinystr.h	/^	void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString	access:private	signature:(size_type sz, size_type cap)
lastChild	./tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode	access:protected
length	./tinystr.h	/^	size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
lineBreak	./tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
location	./tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
main	./xmltest.cpp	/^int main()$/;"	f	signature:()
name	./tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
next	./tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute	access:private
next	./tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode	access:protected
node	./tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
npos	./tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
npos	./tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString	access:public
nullrep_	./tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
nullrep_	./tinystr.h	/^	static Rep nullrep_;$/;"	m	class:TiXmlString	access:private
operator !=	./tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator !=	./tinystr.h	/^inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }$/;"	f	signature:(const TiXmlString & a, const char* b)
operator !=	./tinystr.h	/^inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }$/;"	f	signature:(const char* a, const TiXmlString & b)
operator +	./tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	./tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const char* b)$/;"	f	signature:(const TiXmlString & a, const char* b)
operator +	./tinystr.cpp	/^TiXmlString operator + (const char* a, const TiXmlString & b)$/;"	f	signature:(const char* a, const TiXmlString & b)
operator +	./tinystr.h	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b);$/;"	p	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	./tinystr.h	/^TiXmlString operator + (const TiXmlString & a, const char* b);$/;"	p	signature:(const TiXmlString & a, const char* b)
operator +	./tinystr.h	/^TiXmlString operator + (const char* a, const TiXmlString & b);$/;"	p	signature:(const char* a, const TiXmlString & b)
operator +=	./tinystr.h	/^	TiXmlString& operator += (char single)$/;"	f	class:TiXmlString	access:public	signature:(char single)
operator +=	./tinystr.h	/^	TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & suffix)
operator +=	./tinystr.h	/^	TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString	access:public	signature:(const char * suffix)
operator <	./tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator <	./tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator <<	./tinystr.h	/^	TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const TiXmlString & in)
operator <<	./tinystr.h	/^	TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const char * in)
operator <<	./tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	signature:(std::ostream & out, const TiXmlNode & base)
operator <<	./tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	signature:(std::string& out, const TiXmlNode& base )
operator <<	./tinyxml.h	/^		friend std::string& operator<< (std::string& out, const TiXmlNode& base );$/;"	p	class:TiXmlNode	access:friend	signature:(std::string& out, const TiXmlNode& base )
operator <<	./tinyxml.h	/^	    friend std::ostream& operator<< (std::ostream& out, const TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::ostream& out, const TiXmlNode& base)
operator <=	./tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator =	./tinystr.h	/^	TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & copy)
operator =	./tinystr.h	/^	TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString	access:public	signature:(const char * copy)
operator =	./tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
operator =	./tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
operator =	./tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
operator =	./tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
operator =	./tinyxml.h	/^	TiXmlComment& operator=( const TiXmlComment& base );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& base )
operator =	./tinyxml.h	/^	TiXmlDeclaration& operator=( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
operator =	./tinyxml.h	/^	TiXmlDocument& operator=( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
operator =	./tinyxml.h	/^	TiXmlElement& operator=( const TiXmlElement& base );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& base )
operator =	./tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
operator =	./tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
operator =	./tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
operator =	./tinyxml.h	/^	void operator=( const TiXmlAttribute& base );	\/\/ not allowed.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& base )
operator =	./tinyxml.h	/^	void operator=( const TiXmlAttributeSet& );	\/\/ not allowed (as TiXmlAttribute)$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
operator =	./tinyxml.h	/^	void operator=( const TiXmlBase& base );	\/\/ not allowed.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& base )
operator =	./tinyxml.h	/^	void operator=( const TiXmlNode& base );	\/\/ not allowed.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& base )
operator ==	./tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator ==	./tinystr.h	/^inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == 0; }$/;"	f	signature:(const TiXmlString & a, const char* b)
operator ==	./tinystr.h	/^inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }$/;"	f	signature:(const char* a, const TiXmlString & b)
operator ==	./tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >	./tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) { return b < a; }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator >	./tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >=	./tinystr.h	/^inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator >>	./tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f	signature:(std::istream & in, TiXmlNode & base)
operator >>	./tinyxml.h	/^	    friend std::istream& operator >> (std::istream& in, TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::istream& in, TiXmlNode& base)
operator []	./tinystr.h	/^	char& operator [] (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
parent	./tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode	access:protected
prev	./tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute	access:private
prev	./tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode	access:protected
quit	./tinystr.h	/^	void quit()$/;"	f	class:TiXmlString	access:private	signature:()
rep_	./tinystr.h	/^	Rep * rep_;$/;"	m	class:TiXmlString	access:private
reserve	./tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString	signature:(size_type cap)
reserve	./tinystr.h	/^	void reserve (size_type cap);$/;"	p	class:TiXmlString	access:public	signature:(size_type cap)
row	./tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
sentinel	./tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
set_size	./tinystr.h	/^	void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
simpleTextPrint	./tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
size	./tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
size	./tinystr.h	/^	size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
size_type	./tinystr.h	/^  	typedef size_t size_type;$/;"	t	class:TiXmlString	access:public
stamp	./tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
standalone	./tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
start	./tinystr.h	/^	char* start() const { return rep_->str; }$/;"	f	class:TiXmlString	access:private	signature:() const
str	./tinystr.h	/^		char str[1];$/;"	m	struct:TiXmlString::Rep	access:public
str	./tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
strLength	./tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
swap	./tinystr.h	/^	void swap (TiXmlString& other)$/;"	f	class:TiXmlString	access:public	signature:(TiXmlString& other)
tabsize	./tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument	access:private
tabsize	./tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
type	./tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode	access:protected
useMicrosoftBOM	./tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
userData	./tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase	access:protected
utf8ByteTable	./tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
utf8ByteTable	./tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
value	./tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode	access:protected
value	./tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
version	./tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
~TiXmlAttributeSet	./tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
~TiXmlAttributeSet	./tinyxml.h	/^	~TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
~TiXmlBase	./tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase	access:public	signature:()
~TiXmlComment	./tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment	access:public	signature:()
~TiXmlDeclaration	./tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
~TiXmlDocument	./tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
~TiXmlElement	./tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
~TiXmlElement	./tinyxml.h	/^	virtual ~TiXmlElement();$/;"	p	class:TiXmlElement	access:public	signature:()
~TiXmlNode	./tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
~TiXmlNode	./tinyxml.h	/^	virtual ~TiXmlNode();$/;"	p	class:TiXmlNode	access:public	signature:()
~TiXmlString	./tinystr.h	/^	~TiXmlString ()$/;"	f	class:TiXmlString	access:public	signature:()
~TiXmlText	./tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
~TiXmlUnknown	./tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
~TiXmlVisitor	./tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
